ylab = "Solubility (log)",
main = "(b)",
horizontal = FALSE)
View(solTrainXtrans)
View(solTrainXtrans)
notFingerprints <- grep("FP", names(solTrainXtrans))
library(caret)
featurePlot(solTrainXtrans[, -notFingerprints],
solTrainY,
between = list(x = 1, y = 1),
type = c("g", "p", "smooth"),
labels = rep("", 2))
library(corrplot)
??featurePlot
library(corrplot)
### We used the full namespace to call this function because the pls
### package (also used in this chapter) has a function with the same
### name.
corrplot::corrplot(cor(solTrainXtrans[, -notFingerprints]),
order = "hclust",
tl.cex = .8)
set.seed(100)
indx <- createFolds(solTrainY, returnTrain = TRUE)
ctrl <- trainControl(method = "cv", index = indx)
indx[[1]]
set.seed(100)
lmTune0 <- train(x = solTrainXtrans, y = solTrainY,
method = "lm",
trControl = ctrl)
lmTune0
### And another using a set of predictors reduced by unsupervised
### filtering. We apply a filter to reduce extreme between-predictor
### correlations. Note the lack of warnings.
tooHigh <- findCorrelation(cor(solTrainXtrans), .9)
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered  <-  solTestXtrans[, -tooHigh]
set.seed(100)
lmTune <- train(x = trainXfiltered, y = solTrainY,
method = "lm",
trControl = ctrl)
lmTune
### Save the test set results in a data frame
testResults <- data.frame(obs = solTestY,
Linear_Regression = predict(lmTune, testXfiltered))
View(testResults)
View(testResults)
################################################################################
### Section 6.3 Partial Least Squares
## Run PLS and PCR on solubility data and compare results
set.seed(100)
plsTune <- train(x = solTrainXtrans, y = solTrainY,
method = "pls",
tuneGrid = expand.grid(ncomp = 1:20),
trControl = ctrl)
testResults$PLS <- predict(plsTune, solTestXtrans)
View(testResults)
View(testResults)
summary(lmTune)
simResp[1:6, ]
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coef(mod)[1] + coef(mod)[2] * x), rep(summary(mod)$sigma,
5))
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coef(mod)[1] + coef(mod)[2] * x), rep(summary(mod)$sigma,
5))
}
simResp[1:6, ]
View(simResp)
View(simResp)
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/lab/playground/scratch/simulate.R', echo=TRUE)
debugSource('~/lab/playground/scratch/simulate.R', echo=TRUE)
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
rn
rn
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:12, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:12, ]
simulated <- simulate(mod, 5)
simulated[1:12, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
# coeff_intercept <- coef(mod)[1]
# coeff_x <- coef(mod)[2]
# std_dev <- rep(summary(mod)$sigma,5)
# rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coef(mod)[1] + coef(mod)[2] * x), rep(summary(mod)$sigma,
5))
}
simResp[1:12, ]
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:12, ]
simulated <- simulate(mod, 5)
simulated[1:12, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:100, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:1000, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:100, ]
debugSource('~/lab/playground/scratch/simulate.R', echo=TRUE)
View(simResp)
View(simResp)
View(simResp)
View(simResp)
View(simResp)
# simulated[1:12, ]
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("BradleyTerry2", "caret", "colorspace", "devtools", "doMC", "e1071", "earth", "evaluate", "foreach", "formatR", "ggplot2", "gtools", "highr", "httr", "iterators", "jsonlite", "kernlab", "knitr", "lme4", "manipulate", "markdown", "mime", "plotmo", "plotrix", "pls", "R6", "RcppEigen", "RCurl", "rmarkdown", "roxygen2", "rstudioapi", "scales"))
source('~/lab/gelman/mutli-level/Ch.16/16.8_Principles of modeling in Bugs.R')
setwd("~/lab/gelman/mutli-level/Ch.16")
source('~/lab/gelman/mutli-level/Ch.16/16.8_Principles of modeling in Bugs.R')
county
a
attach.bugs(radon.3)
a
county
a
nrows(a)
is.matrix(a)
radon.3$sims.list$a
radon.3$sims.list$a[3,1]
radon.3$sims.list$a[,1]
radon.3$sims.list$a[,1]
radon.3$sims.list$a[1,
]
radon.3$sims.list$a[1:10,1]
radon.3$sims.list$a[86,1]
radon.3$sims.list$a[85,1]
j
county
a[1]
county[1]
str(county)
str(a)
mean(a[,1])
mean(a[,2])
radon.3
print(radon.3)
print(radon.3)
jb <- c(1,1,1,2,2,2,3,3,3)
jb[1]
jb2 <- jb[1]
jb2
jb
jb2
uranium
jb2 <- c(1,1,2,2,3,3)
u
u.full
county
