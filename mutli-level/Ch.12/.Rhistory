order = "hclust",
tl.cex = .8)
set.seed(100)
indx <- createFolds(solTrainY, returnTrain = TRUE)
ctrl <- trainControl(method = "cv", index = indx)
indx[[1]]
set.seed(100)
lmTune0 <- train(x = solTrainXtrans, y = solTrainY,
method = "lm",
trControl = ctrl)
lmTune0
### And another using a set of predictors reduced by unsupervised
### filtering. We apply a filter to reduce extreme between-predictor
### correlations. Note the lack of warnings.
tooHigh <- findCorrelation(cor(solTrainXtrans), .9)
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered  <-  solTestXtrans[, -tooHigh]
set.seed(100)
lmTune <- train(x = trainXfiltered, y = solTrainY,
method = "lm",
trControl = ctrl)
lmTune
### Save the test set results in a data frame
testResults <- data.frame(obs = solTestY,
Linear_Regression = predict(lmTune, testXfiltered))
View(testResults)
View(testResults)
################################################################################
### Section 6.3 Partial Least Squares
## Run PLS and PCR on solubility data and compare results
set.seed(100)
plsTune <- train(x = solTrainXtrans, y = solTrainY,
method = "pls",
tuneGrid = expand.grid(ncomp = 1:20),
trControl = ctrl)
testResults$PLS <- predict(plsTune, solTestXtrans)
View(testResults)
View(testResults)
summary(lmTune)
simResp[1:6, ]
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coef(mod)[1] + coef(mod)[2] * x), rep(summary(mod)$sigma,
5))
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coef(mod)[1] + coef(mod)[2] * x), rep(summary(mod)$sigma,
5))
}
simResp[1:6, ]
View(simResp)
View(simResp)
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/lab/playground/scratch/simulate.R', echo=TRUE)
debugSource('~/lab/playground/scratch/simulate.R', echo=TRUE)
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
rn
rn
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:6, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:12, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:12, ]
simulated <- simulate(mod, 5)
simulated[1:12, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
# coeff_intercept <- coef(mod)[1]
# coeff_x <- coef(mod)[2]
# std_dev <- rep(summary(mod)$sigma,5)
# rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coef(mod)[1] + coef(mod)[2] * x), rep(summary(mod)$sigma,
5))
}
simResp[1:12, ]
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:12, ]
simulated <- simulate(mod, 5)
simulated[1:12, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:100, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:1000, ]
set.seed(1)
# generate data from the linear function y = 3 + 4.2x with random noise
x <- seq(12, 23, length = 100)
y <- 3 + 4.2 * x + rnorm(100, 0, 5)
mod <- lm(y ~ x)
summary(mod)
coeff_intercept <- coef(mod)[1]
coeff_x <- coef(mod)[2]
std_dev <- rep(summary(mod)$sigma,5)
rn <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
simResp <- matrix(0, 100, 5)
for (i in 1:5) {
simResp[, i] <- rnorm(5, c(coeff_intercept + coeff_x * x), std_dev)
}
simResp[1:100, ]
debugSource('~/lab/playground/scratch/simulate.R', echo=TRUE)
View(simResp)
View(simResp)
View(simResp)
View(simResp)
View(simResp)
# simulated[1:12, ]
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("BradleyTerry2", "caret", "colorspace", "devtools", "doMC", "e1071", "earth", "evaluate", "foreach", "formatR", "ggplot2", "gtools", "highr", "httr", "iterators", "jsonlite", "kernlab", "knitr", "lme4", "manipulate", "markdown", "mime", "plotmo", "plotrix", "pls", "R6", "RcppEigen", "RCurl", "rmarkdown", "roxygen2", "rstudioapi", "scales"))
setwd("~/lab/gelman/mutli-level/Ch.12")
source('~/lab/gelman/mutli-level/Ch.12/12.2_Partial pooling with no predictors.R')
plot(radon.1)
plot(radon)
print(radon)
plot(mlm.radon.nopred)
print(mlm.radon.nopred)
print(radon)
print(mlm.radon.nopred)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(10,20)
?runif
runif(10)
dunif(c(5,10))
dunif(c(5,10))
dunif(c(5,10),10,20)
history
dunif(c(.25,.5,.75))
dunif(c(.25,.5,.75), 10,100)
dunif(.5, 10,100)
dunif(.75, 10,100)
curve(dunif(x, min = 5, max = 15),0,20,n=101,xlab='Expected Return',ylab='Density')
curve(dunif(x, min = 5, max = 15),0,20,n=101,xlab='Expected Return',ylab='Density')
dunif(x, min = 5, max = 15)
dunif(c(.25), min = 5, max = 15)
dunif(c(.25,.5), min = 5, max = 15)
dunif(c(5,10), min = 5, max = 15)
curve(dunif(c(5,6,7,8,9,10,11,12), min = 5, max = 15),0,20,n=101,xlab='Expected Return',ylab='Density')
dunif(c(5,6,7,8,9,10), min = 5, max = 15)
dunif(c(.25,.22,.23,.55))
dunif(c(.25))
dunif(c(.25),4,8)
dunif(c(.2),4,8)
dunif(c(1,2,3,4,5,6,7,8),min = 4, max = 8)
dunif(c(1,2,3,4,5,6,7,8,9,10,11,12),min = 4, max = 8)
punif(c(1,2,3,4,5,6,7,8,9,10,11,12),min = 4, max = 8)
qunif(c(.25,.5.75),min = 4, max = 8)
qunif(c(.25,.5,.75),min = 4, max = 8)
View(radon.inits)
mean(mlm.radon.nopred[mean.Date()])
mean(mlm.radon.nopred["median"])
mean(mlm.radon.nopred[median])
mean(mlm.radon.nopred$mean.a)
mean(mlm.radon.nopred$mean$a)
mlm.radon.nopred$mean$a
mlm.radon.nopred$median$a
mlm.radon.nopred$median$a - mlm.radon.nopred$mean$a
mean(mlm.radon.nopred$mean$a)
mean(mlm.radon.nopred$median$a)
str(mlm.radon.nopred$sims.matrix)
is.matrix(mlm.radon.nopred$sims.matrix)
is.list(mlm.radon.nopred$sims.matrix)
is.vector(mlm.radon.nopred$sims.matrix)
